name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript compilation
        run: npm run build
        
      - name: Run tests
        run: npm test
        
      - name: Run tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage reports to Codecov
        if: matrix.node-version == '18.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run TypeScript type checking
        run: npx tsc --noEmit
        
      # Add linting if/when ESLint is configured
      # - name: Run ESLint
      #   run: npm run lint

  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application (development)
        run: npm run build
        
      - name: Build production optimized version
        run: npm run build:prod
        
      - name: Verify build outputs
        run: |
          echo "Development build completed"
          echo "Contents of dist directory:"
          ls -la dist/ || echo "No dist directory found"
          echo "Checking for built files:"
          find . -name "*.js" -path "./dist/*" | head -10 || echo "No JS files in dist"
          echo ""
          echo "Production build completed"
          echo "Contents of build directory:"
          ls -la build/ || echo "No build directory found"
          echo "Checking for optimized files:"
          find build/ -name "*.js" | head -10 || echo "No JS files in build"
          echo "Checking for compressed files:"
          find build/ -name "*.gz" | wc -l | sed 's/^/Gzip files: /'
          find build/ -name "*.br" | wc -l | sed 's/^/Brotli files: /'
